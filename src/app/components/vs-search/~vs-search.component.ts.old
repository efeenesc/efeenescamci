// import { Component, ViewChild } from '@angular/core';
// import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
// import { debounceTime, distinctUntilChanged, Subject } from 'rxjs';
// import { ScopeFinder } from '../../classes/scopefinder';
// import { VsThemeService } from '../../services/vs-theme.service';
// import * as vst from '../../types/vs-types';
// import anime from 'animejs';
// import { LocalStorageService } from '../../services/local-storage.service';
// import { LoadingBarComponent } from '../loading-bar/loading-bar.component';
// import { GetSetObj } from '../../classes/getsetobj';
// import { VsCardComponent } from '../vs-card/vs-card.component';
// import { MagnifyingGlassComponent } from "../../icons/magnifying-glass/magnifying-glass.component";
// import { SkeletonLoaderComponent } from "../skeleton-loader/skeleton-loader.component";

// const AsyncFunction = (async () => {}).constructor;

// @Component({
//   selector: 'vs-search',
//   standalone: true,
//   imports: [FormsModule, ReactiveFormsModule, LoadingBarComponent, VsCardComponent, MagnifyingGlassComponent, SkeletonLoaderComponent],
//   templateUrl: './vs-search.component.html'
// })
// export class VsSearchComponent {
//   @ViewChild('themebtn') themeBtn!: HTMLElement;
//   themeName?: string | null;
//   themeAuthor?: string | null;
//   themeIcon?: string | null;
//   results?: vst.VSExtension;
//   searchControl!: FormControl;
//   searchDebounce: number = 500;
//   hoverDebounce: number = 250;
//   suppressHover: boolean = false;
//   suppressClick: boolean = false;
//   mouseHover: Subject<boolean> = new Subject();
//   mouseDown: Subject<boolean> = new Subject();
//   searchFilter: vst.VSFilterBody = new vst.VSFilterBody();
//   searchResults!: vst.VSResultBody | null;
//   searching: boolean = false;
//   hoverState: GetSetObj<boolean> = new GetSetObj<boolean>(
//     false,
//     this.playHoverEffect
//   );
//   fullscreen: GetSetObj<boolean> = new GetSetObj<boolean>(
//     false,
//     this.displayFullscreenAnimation
//   );
//   displayLoading: GetSetObj<boolean> = new GetSetObj<boolean>(
//     false,
//     this.playLoadingAnimation
//   );
//   mouseDownState: GetSetObj<boolean> = new GetSetObj<boolean>(
//     false,
//     this.playMouseDownAnimation
//   )
//   downloadPercent: number = 0;
//   buttonCoords?: { left: number; top: number };

//   constructor(
//     private vsSvc: VsThemeService,
//     private _lss: LocalStorageService
//   ) {}

//   ngOnInit() {
//     this.restoreLastTheme();
//     this._lss.valueChanges.subscribe((obj) => {
//       switch (obj.key) {
//         case 'theme_author':
//           this.themeAuthor = obj.value;
//           break;

//         case 'theme_name':
//           this.themeName = obj.value;
//           break;

//         case 'theme_icon':
//           this.themeIcon = 'data:image/png;base64,' + obj.value;
//           break;
//       }
//     });

//     this.searchControl = new FormControl('');
//     this.searchControl.valueChanges
//       .pipe(debounceTime(this.searchDebounce), distinctUntilChanged())
//       .subscribe((query: string) => {
//         this.searching = true;
//         this.searchVSMarketplace(query)
//         .then(() => this.searching = false);
//       });

//     this.mouseHover
//       .pipe(debounceTime(this.hoverDebounce), distinctUntilChanged())
//       .subscribe((newState) => {
//         if (!this.suppressHover) this.hoverState.value = newState;
//       });

//     this.mouseDown
//       .pipe(debounceTime(this.hoverDebounce), distinctUntilChanged())
//       .subscribe((newState) => {
//         this.mouseDownState.value = newState;
//       });
//   }

//   restoreLastTheme() {
//     const cs = this.vsSvc.getFromLocalStorage();
//     if (!cs) return;
//     this.vsSvc.changeColorVariables(cs);

//     this.themeAuthor = this._lss.get("theme_author");
//     this.themeName = this._lss.get("theme_name");
//     this.themeIcon = 'data:image/png;base64,' + this._lss.get("theme_icon");
//   }

//   playMouseDownAnimation(state: boolean) {
//     if (state) {
//       anime({
//         targets: "#themebtn",
//         duration: 100,
//         easing: 'easeInOutQuad'
//       })
//     } else {
//       anime({
//         targets: "#themebtn",
//         duration: 100,
//         easing: 'easeInOutQuad'
//       })
//     }
//   }

//   playHoverEffect(expand: boolean) {
//     if (this.suppressHover) return;

//     const heightChange = expand ? '+=2vh' : '-=2vh';
//     const widthChange = expand ? '+=4vw' : '-=4vw';
//     const padChange = expand ? '+=10px' : '-=10px';
//     const gapChange = expand ? '+=20px' : '-=20px';
//     const opacityChange = expand ? '1.00' : '0.00';

//     setTimeout(() => {
//       anime({
//         targets: '#themebtn',
//         width: widthChange,
//         height: heightChange,
//         padding: padChange,
//         gap: gapChange,
//         duration: 250,
//         easing: 'easeOutElastic(1, 1.2)',
//       });
//       anime({
//         targets: '#theme-select',
//         opacity: opacityChange,
//         duration: 250,
//         easing: 'easeInOutQuad',
//       });
//     }, 0);
//   }

//   playLoadingAnimation(show: boolean) {
//     const opacityChange = show ? '1' : '0';

//     setTimeout(() => {
//       anime({
//         targets: '#extrablur',
//         opacity: opacityChange,
//         duration: 150,
//         easing: 'easeInOutQuad',
//       });
//     }, 0);
//   }

//   buttonClicked() {
//     if (this.suppressClick) return;
//     this.fullscreen.value = true;
//     this.hoverState.value = true;
//     this.suppressClick = true;
//     this.suppressHover = true;
//     setTimeout(() => {
//       anime({
//         targets: '#fullscreen',
//         opacity: 1,
//         easing: 'easeOutQuad',
//         duration: 250,
//       });

//       const widthChange = '+=5vw';
//       const placeholderCard = document.getElementById('placeholder_card')!;
//       const actualCard = document.getElementById('themebtn')!;
//       const { left, top } = placeholderCard.getBoundingClientRect();
//       this.buttonCoords = actualCard.getBoundingClientRect();
//       placeholderCard.style.height = '12vh';

//       anime({
//         targets: '#theme-select',
//         opacity: 0,
//         duration: 250,
//         easing: 'easeInOutQuad',
//       });

//       anime({
//         targets: '#themebtn',
//         left: left,
//         top: top,
//         width: widthChange,
//         height: '12vh',
//         duration: 500,
//         easing: 'easeInOutQuad',
//         fontSize: '+=0.5em',
//       });
//     }, 0);
//   }

//   mouseLeftEvent() {
//     this.mouseHover.next(false);
//   }
//   mouseEnteredEvent() {
//     this.mouseHover.next(true);
//   }

//   mouseDownEvent() {
//     this.mouseDown.next(true);
//   }
//   mouseUpEvent() {
//     this.mouseDown.next(false);
//   }

//   displayFullscreenAnimation(show: boolean) : Promise<void> {
//     document.getElementById('main')!.style.paddingRight = show ? '10px' : '';
//     document.body.style.overflow = show ? 'hidden' : '';
    
//     return new Promise((resolve, _) => {
//       const opacity = show ? 10 : 0;
//       setTimeout(() => {
//         anime({
//           targets: '#fullscreen',
//           opacity: opacity,
//           easing: 'easeOutQuad',
//           duration: 250,
//           complete: () => {
//             resolve();
//           }
//         });

//         if(show) resolve();
//       });
//     })
//   }

//   clickedOutside(event: MouseEvent) {
//     if (!this.suppressClick) return;
//     if (!(event.target as HTMLDivElement).id.includes("fullscreen")) return;
//     this.fullscreen.value = false;

//     setTimeout(() => {
//       const widthChange = '-=5vw';

//       anime({
//         targets: '#themebtn',
//         left: this.buttonCoords?.left,
//         top: this.buttonCoords?.top,
//         width: widthChange,
//         height: '12vh',
//         duration: 500,
//         easing: 'easeInOutQuad',
//         fontSize: '-=0.5em',
//       }).finished.then(() => {
//         document.getElementById('themebtn')!.style.removeProperty('left');

//         setTimeout(() => {
//           this.hoverState.value = false;
//           setTimeout(() => {
//             this.suppressClick = false;
//             this.suppressHover = false;
//           });
//         }, 0);
//       });
//     }, 0);
//   }

//   async searchVSMarketplace(query: string) {
//     this.searchFilter.addSearchFilter(query);
//     this.searchResults = await this.vsSvc.getFilteredResults(this.searchFilter);
//   }

//   async themeSelected(ext: vst.VSExtension, showLoading: boolean = false) {
//     if (showLoading) this.displayLoading.value = true;

//     try {
//       await this.vsSvc.changeTheme(ext, (loaded, total) => {
//         this.downloadPercent = Math.round((loaded / total) * 100);
//       });
//     } catch (err) {
//       console.error('ERROR', err);
//     } finally {
//       if (showLoading) {
//         this.displayLoading.value = false;
//         this.downloadPercent = 0;
//       }
//     }
//   }
// }
